generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Hero {
  heroID   Int       @id @default(autoincrement())
  name     String    @db.VarChar(40)
  image    String    @db.VarChar(255)
  role     String    @db.VarChar(7)
  matchups Matchup[] @relation("HeroPlayed")
  enemies  Matchup[] @relation("HeroEnemies")
  allies   Matchup[] @relation("HeroAllies")
}

model Map {
  mapID Int    @id @default(autoincrement())
  name  String @db.VarChar(40)
  image String @db.VarChar(255)
  mode  String @db.VarChar(40)
  games Game[]
}

model Game {
  matchID      Int           @id @default(autoincrement())
  map          Map           @relation(fields: [mapID], references: [mapID], onUpdate: NoAction)
  user1        String        @db.VarChar(100)
  result       String        @db.VarChar(4)
  role         String        @db.VarChar(7)
  matchups     Matchup[]
  groupMembers GroupMember[]
  mapID        Int
}

model Matchup {
  matchupID  Int     @id @default(autoincrement())
  heroPlayed Hero    @relation("HeroPlayed", fields: [heroPlayedID], references: [heroID], onUpdate: NoAction)
  win        Boolean
  enemies    Hero[]  @relation("HeroEnemies")
  allies     Hero[]  @relation("HeroAllies")
  matchID    Int
  game       Game    @relation(fields: [matchID], references: [matchID], onUpdate: NoAction)

  // Foreign keys for the related models
  heroPlayedID Int
  enemyIDs     Int[]
  allyIDs      Int[]
}

model GroupMember {
  groupMemberID Int    @id @default(autoincrement())
  allyNumber    Int // Values between 1-4 indicating the ally's position
  role          String @db.VarChar(7)
  game          Game   @relation(fields: [gameID], references: [matchID], onUpdate: NoAction)
  gameID        Int
}
